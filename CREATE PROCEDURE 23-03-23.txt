CREATE TABLE promotions (
    promotion_id INT PRIMARY KEY IDENTITY (1, 1),
    promotion_name VARCHAR (255) NOT NULL,
    discount NUMERIC (3, 2) DEFAULT 0,
    start_date DATE NOT NULL,
    expired_date DATE NOT NULL
); 



exec test;

select * FROM demo

    
    
    
declare @id bigint,
@name varchar(500)
DECLARE test_cur CURSOR LOCAL FOR
         
	 SELECT   id , name
               FROM demo 


		OPEN test_cur
	    FETCH NEXT FROM test_cur INTO 
	       @id,@name
	 
	WHILE @@fetch_status = 0
	BEGIN
	 
	 select @id as admit_card

	FETCH NEXT FROM test_cur INTO 
	      @id,@name
	END
    
    
    
    create proc demo (@id bigint ) 
    AS 
    BEGIN
    DECLARE @base_amount Decimal (10,2);
    set @base_amount = '';
    
    select  id = @id + @base_amount 
    from commissions
    where id = @id;
   
    Print @base_amount
    
    end;
    
    
    
    CREATE TABLE products (
	product_name nvarchar(50),
	price int
)
    
    alter table products 
    alter column price to list_price;
    
    alter table products 
    add  model_year datetime ;
    
    
    
    sp_rename  'products.price' ,  'list_price', 'column';
    
    
    create procedure test ( 
                  @model_year datetime;
    
    
    
    
    CREATE PROC usp_divide(
    @a decimal,
    @b decimal,
    @c decimal output
) AS
BEGIN
    BEGIN TRY
        SET @c = @a / @b;
    END TRY
    BEGIN CATCH
        SELECT  
            ERROR_NUMBER() AS ErrorNumber  
            ,ERROR_SEVERITY() AS ErrorSeverity  
            ,ERROR_STATE() AS ErrorState  
            ,ERROR_PROCEDURE() AS ErrorProcedure  
            ,ERROR_LINE() AS ErrorLine  
            ,ERROR_MESSAGE() AS ErrorMessage;  
    END CATCH
END;

      

      
      CREATE TABLE persons
(
    person_id  INT
    PRIMARY KEY IDENTITY, 
    first_name NVARCHAR(100) NOT NULL, 
    last_name  NVARCHAR(100) NOT NULL
);

CREATE TABLE deals
(
    deal_id   INT
    PRIMARY KEY IDENTITY, 
    person_id INT NOT NULL, 
    deal_note NVARCHAR(100), 
    FOREIGN KEY(person_id) REFERENCES persons(
    person_id)
);

insert into 
    persons(first_name, last_name)
values
    ('John','Doe'),
    ('Jane','Doe');

insert into 
    deals(person_id, deal_note)
values
    (1,'Deal for John Doe');

      
      
      CREATE PROC report_error
AS
    SELECT   
        ERROR_NUMBER() AS ErrorNumber  
        ,ERROR_SEVERITY() AS ErrorSeverity  
        ,ERROR_STATE() AS ErrorState  
        ,ERROR_LINE () AS ErrorLine  
        ,ERROR_PROCEDURE() AS ErrorProcedure  
        ,ERROR_MESSAGE() AS ErrorMessage;  

exec report_error;
      
CREATE PROC delete_person(
    @person_id INT
) AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
        -- delete the person
        DELETE FROM persons 
        WHERE person_id = @person_id;
        -- if DELETE succeeds, commit the transaction
        COMMIT TRANSACTION;  
    END TRY
    BEGIN CATCH
        -- report exception
        EXEC report_error;
        
        -- Test if the transaction is uncommittable.  
        IF (XACT_STATE()) = -1  
        BEGIN  
            PRINT  N'The transaction is in an uncommittable state.' +  
                    'Rolling back transaction.'  
            ROLLBACK TRANSACTION;  
        END;  
        
        -- Test if the transaction is committable.  
        IF (XACT_STATE()) = 1  
        BEGIN  
            PRINT N'The transaction is committable.' +  
                'Committing transaction.'  
            COMMIT TRANSACTION;     
        END;  
    END CATCH
END;
      
      exec delete_person 1;


      
      
      DECLARE 
    @ErrorMessage  NVARCHAR(4000), 
    @ErrorSeverity INT, 
    @ErrorState    INT;

BEGIN TRY
    RAISERROR('Error occurred in the TRY block.', 17, 1);
END TRY
BEGIN CATCH
    SELECT 
        @ErrorMessage = ERROR_MESSAGE(), 
        @ErrorSeverity = ERROR_SEVERITY(), 
        @ErrorState = ERROR_STATE();

    -- return the error inside the CATCH block
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
END CATCH;

      
      
      
      DECLARE @MessageText NVARCHAR(100);
SET @MessageText = N'Cannot delete the sales order %s';

RAISERROR(
    @MessageText, -- Message text
    16, -- severity
    1, -- state
    N'2001' -- first argument to the message text
);

      CREATE TABLE employee (
id INT PRIMARY KEY,
name VARCHAR(50),
salary INT,
department_id INT
);
      
   INSERT INTO employee (id, name, salary, department_id)
VALUES (1, 'John Doe', 50000, 1),
(2, 'Jane Smith', 60000, 1),
(3, 'Bob Johnson', 70000, 2),
(4, 'Alice Williams', 80000, 2),
(5, 'Charlie Brown', 90000, 3);   
      
      
CREATE or replace PROCEDURE find_second_highest_salary
@department_id INT
AS
BEGIN
SELECT MAX(salary) AS second_highest_salary
FROM employee
WHERE salary <(SELECT MAX(salary) FROM employee WHERE department_id = @department_id);
END; 

   EXECUTE find_second_highest_salary ;
      
  
  create procedure test 
      as 
      BEGIN
      select id, name , salary
      from employee 
      order by id 
      end;
      
      exec test;
      
      alter procedure  test
      as 
      BEGIN
      select id, name , salary
      from employee 
      order by id 
      end;
      
      exec test;
      
      
      
      create   procedure test_p1 
      as 
      BEGIN
     select id, name , salary
      from employee
     
      order by salary ASC
      end;
      
      
      
      alter procedure test_p1 (@min_price as decimal )
      as 
      BEGIN
     select id, name , salary
      from employee
      where salary >= @min_price
      order by salary ASC
      end;
      
      exec test_p1  70000 ;
      
      
      
      alter procedure test_p1 (@min_sal as decimal,
                               @max_sal as decimal)
      as
      begin 
      select id, name, salary
      from employee
      where salary >= @min_sal
      and salary <=@max_sal 
      order by salary ;
      end ;
      
      
      
      EXEC test_p1 @min_sal =60000, 
                   @max_sal =90000;
      
      
      
      alter procedure test_p1 (@min_sal as decimal,
                               @max_Sal as decimal,
                               @name as varchar(max))
      as 
      BEGIN
      select id, name, salary
      from employee
      where salary >= @min_sal
      AND salary <= @max_sal
      AND name like '%' + @name + '%'
      order by name ;
      end;
      
      
      exec test_p1  @min_sal= 60000,
                    @max_sal= 90000,
                    @name = 'Brown';
      
      
      
      alter procedure test_p1 (@min_sal  as decimal =60000,
                               @max_sal as decimal = 90000,
                               @name as varchar(max))
      
      as 
      begin
      select id, name, salary
      from employee
      where salary >= @min_sal
      AND salary <= @max_sal
      AND name like '%' + @name + '%'
      order by salary
      end;
      
      
      exec test_p1 @name = 'Brown';
      
      
      
      
      alter procedure test_p1 (@min_sal  as decimal,
                               @max_sal as decimal,
                               @name as varchar(max))
      AS
      BEGIN
      select id, name, salary
      from employee
      where salary >= @min_sal
      and (@max_sal is null or salary  <=@max_sal) 
      AND name like '%' + @name + '%'
      order by id
      end;
      
      
      exec test_p1 @min_sal = 50000,
                   @max_sal = null,
                   @name = 'Smith' ;
      
      
      
      DECLARE @salary as  decimal;
      
      set @salary = 70000;
      
     select id, name, salary
      from employee
      where salary = @salary
      order by id;
      
      
      
      
      declare @salary as decimal;
      
      set @salary = 80000;
      
      select id , name, salary 
      from employee
      where salary = @salary ;
      
      
      
      declare @name as varchar(max),
              @salary as decimal;
      
      SELECT @name = name,
             @salary = salary
      from employee
      where department_id = 3;
      
      
      
      select @name as name,
             @salary as salary;
      
      
      
      
      
      drop proc demo_1;
      
      create proc demo_1 (@id  smallint)
      as 
      BEGIN
      declare @name as varchar(max);
      set @name = '';
      SELECT @name = @name 
      from employee
      where department_id =@id
      order by name;
      end;
      
      exec demo_1 2
      
      
      drop proc test_2;
      
      create proc test_2 (@salary as decimal ,
                   @p_count as INT OUTPUT)
      
      as 
      BEGIN
      select id , name, salary, department_id 
      from employee
      where salary = @salary;
      
      select @p_count = @@ROWCOUNT ;
      end;
      
     declare @count as INT;
      
      exec test_2 @salary = 60000,
      @p_count = @count OUTPUT;
      
      
      select @count as 'Number of products found';
      
select * from employee